buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.bmuschko.docker-remote-api' version '7.4.0'
}

version "1.0"
group "mySqlDockerImage"

ext {
    if(Boolean.parseBoolean(mysql8)) {
        dockerTag = "mysql-8-${dumpDatabase}:$dockerVersion"
        mysqlVersion = "mysql-8"
    }else{
        dockerTag = "mysql-5.7-${dumpDatabase}:$dockerVersion"
        mysqlVersion = "mysql-5.7"
    }

    dockerBuildDir = mkdir("${buildDir}/docker")
}

task dumpSchema() {
    group = 'sql'

    doLast {
        exec {
            workingDir './build/docker'
            commandLine 'sh', '-c', getSchemaCommand(1, dumpDatabase)
        }
    }
}


task dumpData(dependsOn: dumpSchema) {
    group = 'sql'

    doLast {
        exec {
            workingDir './build/docker'
            commandLine 'sh', '-c', getDataCommand(2, dumpDatabase)
        }
    }
}

task dumpDatabases() {
    group = 'sql'

    doLast {
        List databases = dumpDatabase.split(',')
        List hosts = dbkeys.split(',')
        Integer position = 1
        Map dbCredentials

        databases.eachWithIndex { String database, Integer index ->
            File createDBScript = new File("$dockerBuildDir/${position-1}_create_and_use_${database}.sql")
            dbCredentials = new AWSSecretManger().getSecret(hosts[index])

            createDBScript << """
            CREATE DATABASE IF NOT EXISTS $database;
        """.stripIndent()

            println getSchemaCommand(position + 1, database, dbCredentials.host, '*****', '*****')


            exec {
                workingDir './build/docker'
                commandLine 'sh', '-c', getSchemaCommand(position + 1, database, dbCredentials.host, dbCredentials.username, dbCredentials.password)
            }

            println getDataCommand(position + 2, database, dbCredentials.host, '*****', '*****')
            exec {
                workingDir './build/docker'
                commandLine 'sh', '-c', getDataCommand(position + 2, database, dbCredentials.host, dbCredentials.username, dbCredentials.password)
            }

            position += 3
        }
    }
}


String getSchemaCommand(Integer position, String dbname, String host, String dbUserName, String dbPassword) {
    """
        mysqldump -Cq -h $host -u'$dbUserName' -p'$dbPassword'
        --no-data
        --single-transaction
        --order-by-primary
        --routines 
        ${extraFlags}
        -B ${dbname} > ${buildDir.path}/docker/${position}_initial_schema_${dbname}.sql
    """.stripIndent().replace('\n', ' ').strip()
}

String getDataCommand(Integer position, String dbname, String host, String dbUserName, String dbPassword) {
    """
        mysqldump -Cq -h $host -u'$dbUserName' -p'$dbPassword'
        --no-create-info
        --skip-triggers
        --single-transaction
        --order-by-primary
        --routines 
        ${extraFlags}
        --ignore-table=${dbname}.broker_assoc_comm_log
        --ignore-table=${dbname}.broker_comm_log
        --ignore-table=${dbname}.communication_log
        --ignore-table=${dbname}.communication_log_docs
        --ignore-table=${dbname}.contact_comm_log
        --ignore-table=${dbname}.correspondent_assoc_comm_log
        --ignore-table=${dbname}.correspondent_comm_log
        --ignore-table=${dbname}.domain_table_audit_log
        --ignore-table=${dbname}.dsp_loan_call_log
        --ignore-table=${dbname}.fee_service_transaction_log
        --ignore-table=${dbname}.home_loan_aus_log
        --ignore-table=${dbname}.home_loan_compliance_log
        --ignore-table=${dbname}.home_loan_leg_log
        --ignore-table=${dbname}.home_loan_system_error_log
        --ignore-table=${dbname}.mi_quote_transaction_log
        --ignore-table=${dbname}.ob_loan_services_log
        --ignore-table=${dbname}.participant_communication_log
        --ignore-table=${dbname}.pricing_service_transaction_log
        --ignore-table=${dbname}.queue_message_log
        --ignore-table=${dbname}.ref_call_log_call_purpose_type
        --ignore-table=${dbname}.referal_partner_assoc_comm_log
        --ignore-table=${dbname}.referal_partner_comm_log
        --ignore-table=${dbname}.shuttle_log
        --ignore-table=${dbname}.sys_batch_log
        --ignore-table=${dbname}.sys_batch_update_log
        --ignore-table=${dbname}.sys_custom_tasking_log
        --ignore-table=${dbname}.sys_user_comm_log
        --ignore-table=${dbname}.sys_web_service_log
        --ignore-table=${dbname}.warehouse_bank_export_log
        --ignore-table=${dbname}.web_service_transaction_log
        -B ${dbname} > ${buildDir.path}/docker/${position}_initial_data_${dbname}.sql
    """.stripIndent().replace('\n', ' ').strip()
}



import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task prepareDocker(type: Copy, dependsOn: dumpDatabases) {
    description = 'Copy docker file to build directory'
    group = 'Docker'

    if(Boolean.parseBoolean(mysql8)){
        from "${rootProject.projectDir}/mysql-8/Dockerfile"
    } else {
        from "${rootProject.projectDir}/mysql-5_7/Dockerfile"
    }

    from "${rootProject.projectDir}/1_initial_users.sql"

    into dockerBuildDir

}

task buildImage(type: DockerBuildImage, dependsOn: prepareDocker) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'
    inputDir = file(dockerBuildDir)
    images.add(dockerTag)

    println "Building: $dockerTag"

    if (dockerRegistry) {
        images.add("$dockerPrefix/$dockerTag".toString())
    }
}

task buildImageManualSchema(type: DockerBuildImage) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'
    inputDir = file(dockerBuildDir)
    images.add("$mysqlVersion-${dockertag}:$dockerVersion")

    println "Building: $mysqlVersion-${dockertag}:$dockerVersion"

    if (dockerRegistry) {
        images.add("$dockerPrefix/$mysqlVersion-${dockertag}:$dockerVersion".toString())
    }
}

task pushImage(type: DockerPushImage, dependsOn: buildImage) {
    group "docker"
    description "Push custom docker image."

    "Pushing: $dockerTag"


    List token = new AWSEcrClient(awsId, awsKey).getToken(aws).split(':')

    registryCredentials {
        url = dockerRegistry
        username = token[0]
        password = token[1]
    }

    images.add("$dockerPrefix/$dockerTag".toString())

}


task pushImageManual(type: DockerPushImage) {
    group "docker"
    description "Push custom docker image."

    "Pushing: $dockertag"

    List token = new AWSEcrClient(awsId, awsKey).getToken(aws).split(':')

    registryCredentials {
        url = dockerRegistry
        username = token[0]
        password = token[1]
    }

    images.add("$dockerPrefix/$mysqlVersion-${dockertag}:$dockerVersion".toString())

}
